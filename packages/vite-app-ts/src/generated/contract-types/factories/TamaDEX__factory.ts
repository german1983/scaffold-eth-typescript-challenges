/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TamaDEX, TamaDEXInterface } from "../TamaDEX";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token_addr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "ethToToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokens",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "liquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "input_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "input_reserve",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "output_reserve",
        type: "uint256",
      },
    ],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokens",
        type: "uint256",
      },
    ],
    name: "tokenToEth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "liq_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b06380380610b0683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610a73806100936000396000f3fe60806040526004361061007b5760003560e01c8063789770f41161004e578063789770f41461011e578063b7b0422d14610126578063b8c876b114610139578063d0e30db01461016657600080fd5b806315770f92146100805780632071a9f4146100a95780632e1a7d4d146100c957806370b2a30f146100fe575b600080fd5b34801561008c57600080fd5b5061009660015481565b6040519081526020015b60405180910390f35b3480156100b557600080fd5b506100966100c4366004610907565b61016e565b3480156100d557600080fd5b506100e96100e4366004610933565b6101bd565b604080519283526020830191909152016100a0565b34801561010a57600080fd5b50610096610119366004610933565b6103cc565b61009661056a565b610096610134366004610933565b610674565b34801561014557600080fd5b5061009661015436600461094c565b60026020526000908152604090205481565b610096610779565b60008061017d856103e5610992565b9050600061018b8483610992565b905060008261019c876103e8610992565b6101a691906109b1565b90506101b281836109c9565b979650505050505050565b600080546040516370a0823160e01b8152306004820152829182916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561020a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022e91906109eb565b9050600060015447866102419190610992565b61024b91906109c9565b90506000600154838761025e9190610992565b61026891906109c9565b3360009081526002602052604081208054929350889290919061028c908490610a04565b9250508190555085600160008282546102a59190610a04565b9091555050604051600090339084908381818185875af1925050503d80600081146102ec576040519150601f19603f3d011682016040523d82523d6000602084013e6102f1565b606091505b50509050806103425760405162461bcd60e51b81526020600482015260186024820152772330b4b632b2103a379039b2b732103ab9b2b91032ba341760411b60448201526064015b60405180910390fd5b60005460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190610a1b565b6103c057600080fd5b50909590945092505050565b600080546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043991906109eb565b9050600061044884834761016e565b604051909150600090339083908381818185875af1925050503d806000811461048d576040519150601f19603f3d011682016040523d82523d6000602084013e610492565b606091505b50509050806104de5760405162461bcd60e51b81526020600482015260186024820152772330b4b632b2103a379039b2b732103ab9b2b91032ba341760411b6044820152606401610339565b6000546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105599190610a1b565b61056257600080fd5b509392505050565b600080546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d791906109eb565b905060006105ef346105e98147610a04565b8461016e565b60005460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190610a1b565b61066e57600080fd5b92915050565b60006001546000146106d45760405162461bcd60e51b8152602060048201526024808201527f54616d614445583a696e6974202d20616c726561647920686173206c697175696044820152636469747960e01b6064820152608401610339565b47600181905533600081815260026020526040808220939093555491516323b872dd60e01b81526004810191909152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190610a1b565b61077157600080fd5b505060015490565b6000806107863447610a04565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f891906109eb565b90506000826108078334610992565b61081191906109c9565b61081c9060016109b1565b90506000836001543461082f9190610992565b61083991906109c9565b3360009081526002602052604081208054929350839290919061085d9084906109b1565b92505081905550806001600082825461087691906109b1565b90915550506000546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190610a1b565b6108ff57600080fd5b949350505050565b60008060006060848603121561091c57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561094557600080fd5b5035919050565b60006020828403121561095e57600080fd5b81356001600160a01b038116811461097557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156109ac576109ac61097c565b500290565b600082198211156109c4576109c461097c565b500190565b6000826109e657634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156109fd57600080fd5b5051919050565b600082821015610a1657610a1661097c565b500390565b600060208284031215610a2d57600080fd5b8151801515811461097557600080fdfea26469706673582212205aecfbd61d2486a31a25313cb2a7ffd100c17d26e9af2c97fc72e0363d6ca0e764736f6c634300080c0033";

export class TamaDEX__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    token_addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TamaDEX> {
    return super.deploy(token_addr, overrides || {}) as Promise<TamaDEX>;
  }
  getDeployTransaction(
    token_addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token_addr, overrides || {});
  }
  attach(address: string): TamaDEX {
    return super.attach(address) as TamaDEX;
  }
  connect(signer: Signer): TamaDEX__factory {
    return super.connect(signer) as TamaDEX__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TamaDEXInterface {
    return new utils.Interface(_abi) as TamaDEXInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TamaDEX {
    return new Contract(address, _abi, signerOrProvider) as TamaDEX;
  }
}
